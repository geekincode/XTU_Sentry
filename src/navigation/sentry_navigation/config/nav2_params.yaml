# 机器人定位
amcl:
  ros__parameters:
    use_sim_time: false
    # AMCL从参数 initial_pose 设置机器人初始姿势，而不是等待话题 initial_pose 消息。
    set_initial_pose: true
    # # 全局坐标系中机器人底座初始位姿的X、Y、Z坐标和偏航角（单位为米和弧度）
    initial_pose:
      x: 0.0
      y: 0.0
      z: 0.0
      yaw: 0.0
    # 充值时AMCL要求一个初始姿势，该姿态可以通过一个话题或参数initial_pose* (同时参数 set_initial_pose: true ) 获取。否则，默认AMCL将使用最后已知的姿势进行初始化。
    always_reset_initial_pose: false
    # 从旋转角度考虑机器人里程计的旋转噪声
    alpha1: 0.2
    # 机器人平移分量中的里程计旋转噪音，噪声在机器人左右两边分布
    alpha2: 0.2
    # 机器人平移过程中的里程计平移噪音，沿着机器人前进方向分布
    alpha3: 0.2
    # 机器人旋转过程中的里程计平移噪音， 斜角方向上的运动噪声
    alpha4: 0.2
    # 仅适用于全向式（Omni）: 平移噪声
    alpha5: 0.2
    base_frame_id: "base_link"
    # 设置忽略掉似然场模型中大多数粒子与地图不一致的光束，表示忽略的最大距离单位 (m) 
    beam_skip_distance: 0.5
    # 不匹配地图后的光束百分比，由于不一致而强制完全更新。
    beam_skip_error_threshold: 0.9
    # 需要跳过的光束（beams ）的百分比。
    beam_skip_threshold: 0.3
    # 是否在似然场模型（Likelihood field model）中进行波束（beam ）跳过。
    do_beamskip: false
    # 定位系统发布的坐标系名称
    global_frame_id: "map"
    # 模型z_short部分的指数衰减参数
    lambda_short: 0.1
    # 在地图上进行障碍物充气的最大距离，用于likelihood_field模型。
    laser_likelihood_max_dist: 2.0
    # 要考虑的最大扫描范围，设为-1.0会直接使用激光报告的最大范围
    laser_max_range: 100.0
    laser_min_range: -1.0
    # 使用哪个模型，beam、likelihood_field 或 likelihood_field_prob。likelihood_field_prob 包含beamskip功能
    laser_model_type: "likelihood_field"
    # 更新过滤器时，设置每次扫描要使用多少个均匀间隔的光束
    max_beams: 60
    # 所允许的最大粒子数
    max_particles: 2000
    # 所允许的最小粒子数
    min_particles: 500
    odom_frame_id: "odom"
    # 粒子过滤器总体误差
    pf_err: 0.05
    # 粒子过滤器总体密度
    pf_z: 0.99
    # 快速平均重量过滤器的指数衰减率，用于决定何时通过添加随机姿势来恢复。一个好的值可能是0.001
    recovery_alpha_fast: 0.001
    # 慢平均重量过滤器的指数衰减率，用于通过添加随机姿势来决定何时恢复。一个好的值可能是0.001。
    recovery_alpha_slow: 0.001
    # 重新采样前所需的过滤器更新数量
    resample_interval: 1
    # 插件类的完全限定类型。可以值为nav2_amcl::DifferentialMotionModel和nav2_amcl::OmniMotionModel。
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    # 将最后估计姿态和协方差存储到参数服务器的最大速率 (Hz)，在变量 ~initial_pose_* 和 ~initial_cov_* 中。此保存的姿势将在后续运行中用于初始化过滤器 (-1.0表示禁用)。
    save_pose_rate: 0.5
    # 用于设置在模型z_hit部分中使用的高斯模型的标准差
    sigma_hit: 0.2
    # 用于设置是否广播坐标变换。参数False可以以防止amcl发布全局坐标系和里程计坐标系之间的坐标变换
    tf_broadcast: true
    # TF转换发布后的，该转换的所维持的有效时间
    transform_tolerance: 1.0
    # 在执行过滤器更新之前需要的最小旋转角度
    update_min_a: 0.2
    # 在执行过滤器更新之前需要的最小平移距离
    update_min_d: 0.25
    # 模型中z_hit部分的混合权重，所有使用的z权重之和必须为1。光束（Beam）模型使用所有共4个z_*权重，而似然模型（Likelihood）使用z_hit和z_rand权重
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    # 要订阅的激光雷达话题名称
    scan_topic: cloud_registered

# 导航行为树（用于加载行为树节点并根据xml配置进行配置)
bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    # BT 执行的每次迭代的持续时间
    bt_loop_duration: 10
    # 一个 BT 动作节点正在等待action server的确认时的默认超时值
    default_server_timeout: 20
    # 默认行为树XML描述的路径
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: false

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: false

# 控制器服务器
controller_server:
  ros__parameters:
    use_sim_time: false
    # 运行控制器的频率
    controller_frequency: 20.0
    # 控制器服务器过滤接收到的里程表消息的速度部分，然后将其发送到控制器插件。低于该阈值 (以m/s为单位) 的里程表值将设置为0.0。
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    # 用于检查机器人进度的进度检查器插件的映射名称
    progress_checker_plugin: "progress_checker"
    # 达到用于检查目标的目标检查器插件的映射名称
    goal_checker_plugins: ["general_goal_checker"] 
    # 用于处理请求和参数的控制器插件的映射名称列表
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      # 为了达到目标，机器人必须移动的最小量 (m)
      required_movement_radius: 0.4
      # 机器人必须移动最小半径的最大时间
      movement_time_allowance: 10.0
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      # 旋转到目标方向后是否检查XY位置公差，以防出现较小的定位变化
      stateful: true
      plugin: "nav2_controller::SimpleGoalChecker"
      # 满足目标完成标准的容忍度 (m)
      xy_goal_tolerance: 0.5
      yaw_goal_tolerance: 0.3
    FollowPath:
      # 纯追踪控制参数
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      # 所需使用的最大线速度 (m/s)
      desired_linear_vel: 2.0
      # 当 use_velocity_scaled_lookahead_dist 为 false 时，用于找到超前点的超前距离 (m)
      lookahead_dist: 0.6
      # 参数 use_velocity_scaled_lookahead_dist 为 true 时的最小超前距离 (m) 阈值
      min_lookahead_dist: 0.3
      # 参数 use_velocity_scaled_lookahead_dist 为 true 时的最大超前距离 (m) 阈值
      max_lookahead_dist: 0.9
      # 当 use_velocity_scaled_lookahead_dist 为 true 时，预测速度的时间。也被称为超前增益
      lookahead_time: 1.5
      # 如果 use_rotate_to_heading 是 true ，这是使用的角速度
      rotate_to_heading_angular_vel: 2.2
      # TF变换公差
      transform_tolerance: 0.1
      # 是否使用速度缩放的超前距离或常数 lookahead_distance
      use_velocity_scaled_lookahead_dist: false
      # 接近目标时应用的最小速度 (m/s) 阈值，以确保进度。必须是 > 0.01
      min_approach_linear_velocity: 0.1
      # 向前投射速度命令以检查碰撞的时间
      max_allowed_time_to_collision_up_to_carrot: 1.0
      # 是否对路径曲率使用调节特征 (例如在高曲率路径上运行缓慢)
      use_regulated_linear_velocity_scaling: false
      # 是否使用受管制的特征来接近障碍物 (例如，接近障碍物时速度慢)
      use_cost_regulated_linear_velocity_scaling: false
      # 当 use_regulated_linear_velocity_scaling 为 true 时，触发调节特征的转弯半径 (m)。记住，更尖锐的转弯半径更小
      regulated_linear_scaling_min_radius: 0.4
      # 任何受监管的试探法可以发送的最小速度 (m/s)，以确保即使在具有高曲率的高成本空间中，过程仍然可以实现。必须是 > 0.1
      regulated_linear_scaling_min_speed: 0.3
      # 使用完整的planner时，是否能够旋转到粗糙的航向和目标方向。推荐用于所有可以就地旋转的机器人类型。注意: use_rotate_to_heading 和 allow_reversing 不能同时设置为 true ，因为这会导致不明确的情况
      use_rotate_to_heading: true
      # 当计划的路径涉及反向 (由方向尖点表示) 时，使机器人能够反向驱动
      allow_reversing: false
      # 如果 use_rotate_to_heading 是 true ，路径方向和启动机器人方向 (弧度) 的差异会触发旋转
      rotate_to_heading_min_angle: 1.0
      # 如果 use_rotate_to_heading 为 true ，则旋转至航向时的最大允许角加速度 (rad/s)
      max_angular_accel: 9.0

      # DWB默认控制器 parameters
      # plugin: "dwb_core::DWBLocalPlanner"
      # debug_trajectory_details: True
      # min_vel_x: 0.0
      # min_vel_y: 0.0
      # max_vel_x: 0.26
      # max_vel_y: 0.0
      # max_vel_theta: 1.0
      # min_speed_xy: 0.0
      # max_speed_xy: 0.26
      # min_speed_theta: 0.0
      # acc_lim_x: 2.5
      # acc_lim_y: 0.0
      # acc_lim_theta: 3.2
      # decel_lim_x: -2.5
      # decel_lim_y: 0.0
      # decel_lim_theta: -3.2
      # vx_samples: 20
      # vy_samples: 5
      # vtheta_samples: 20
      # sim_time: 1.7
      # linear_granularity: 0.05
      # angular_granularity: 0.025
      # transform_tolerance: 0.2
      # xy_goal_tolerance: 0.25
      # trans_stopped_velocity: 0.25
      # short_circuit_trajectory_evaluation: True
      # stateful: True
      # critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      # BaseObstacle.scale: 0.02
      # PathAlign.scale: 32.0
      # GoalAlign.scale: 24.0
      # PathAlign.forward_point_distance: 0.1
      # GoalAlign.forward_point_distance: 0.1
      # PathDist.scale: 32.0
      # GoalDist.scale: 24.0
      # RotateToGoal.scale: 32.0
      # RotateToGoal.slowing_factor: 5.0
      # RotateToGoal.lookahead_time: -1.0

# 局部代价地图
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: false
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      # 机器人半径
      robot_radius: 0.36
      plugins: ["voxel_layer", "inflation_layer"]
      # 碰撞层(膨胀层,用于防撞)
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        # 碰撞层半径
        inflation_radius: 0.21
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

# 全局代价地图
global_costmap:
  global_costmap:
    ros__parameters:
      # 代价地图更新频率
      update_frequency: 1.0
      # 将costmap发布到主题的频率
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: false
      # 机器人半径
      robot_radius: 0.36
      # 成本图1像素的分辨率(米)
      resolution: 0.05
      # 如果为false，则将未知空间视为自由空间，否则将视为未知空间
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        # 传感器来源列表
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      # 碰撞层(膨胀层,用于防撞)
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        # 碰撞层半径
        inflation_radius: 0.5
      # 是否每次更新都发送完整的成本图，而不是更新
      always_send_full_costmap: True

# 处理堆栈的地图加载请求并托管地图主题的服务
map_server:
  ros__parameters:
    use_sim_time: false
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

# 地图保存服务
map_saver:
  ros__parameters:
    use_sim_time: false
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

# 规划服务器
planner_server:
  ros__parameters:
    # 预期planner频率。如果当前频率小于预期频率，则显示警告消息。
    expected_planner_frequency: 20.0
    use_sim_time: false
    # 参数和处理请求的映射插件名称列表
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      # 是否允许在未知空间进行规划
      allow_unknown: true

smoother_server:
  ros__parameters:
    use_sim_time: false
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: false
    simulate_ahead_time: 2.0
    max_rotational_vel: 2.2
    min_rotational_vel: 0.4
    rotational_acc_lim: 9.0

# 恢复服务器
recoveries_server:
  ros__parameters:
    # 用于碰撞检查的原始成本图主题
    costmap_topic: local_costmap/costmap_raw
    # costmap框架中足迹的主题
    footprint_topic: local_costmap/published_footprint
    # 运行恢复插件的频率
    cycle_frequency: 20.0
    # 要使用的插件名称列表，也与操作服务器名称匹配
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    # 是时候展望未来的碰撞了
    simulate_ahead_time: 2.0
    # 最大旋转速度 (rad/s)
    max_rotational_vel: 2.0
    # 最小旋转速度 (rad/s)
    min_rotational_vel: 0.4
    # 最大旋转加速度 (rad/s ^ 2)
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: false

# 使用导航操作服务器执行路点追踪
waypoint_follower:
  ros__parameters:
    use_sim_time: false
    # 检查当前导航任务结果的速率
    loop_rate: 20
    # 如果单个航点失败，是否失败。如果为false，将继续前往下一个航路点
    stop_on_failure: false
    # 一个插件，用于定义机器人到达航路点时要执行的任务
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

# 调整速度
velocity_smoother:
  ros__parameters:
    use_sim_time: false
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.75, 0.75, 2.2]
    min_velocity: [-0.26, 0.0, -1.0]
    max_accel: [1.8, 1.8, 9.0]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
